var test = require('tape')
var semver = require('../')
var coerce = semver.coerce
var valid = semver.valid

String.prototype.r = function (count) {
  return this.repeat(count)
}

test('\ncoerce tests', function (t) {
  // Expected to be null (cannot be coerced).
  ;[
    null,
    { version: '1.2.3' },
    () => '1.2.3',
    '',
    '.',
    'version one',
    '9'.r(16),
    '1'.r(17),
    'a' + '9'.r(16),
    'a' + '1'.r(17),
    '9'.r(16) + 'a',
    '1'.r(17) + 'a',
    '9'.r(16) + '.4.7.4',
    '9'.r(16) + '.' + '2'.r(16) + '.' + '3'.r(16),
    '1'.r(16) + '.' + '9'.r(16) + '.' + '3'.r(16),
    '1'.r(16) + '.' + '2'.r(16) + '.' + '9'.r(16)
  ].forEach(function (input) {
    var msg = `coerce(${input}) should be null`
    t.equal(coerce(input), null, msg)
  })

  // Expected to be the valid.
  ;[
    [semver.parse('1.2.3'), '1.2.3'],
    ['.1', '1.0.0'],
    ['.1.', '1.0.0'],
    ['..1', '1.0.0'],
    ['.1.1', '1.1.0'],
    ['1.', '1.0.0'],
    ['1.0', '1.0.0'],
    ['1.0.0', '1.0.0'],
    ['0', '0.0.0'],
    ['0.0', '0.0.0'],
    ['0.0.0', '0.0.0'],
    ['0.1', '0.1.0'],
    ['0.0.1', '0.0.1'],
    ['0.1.1', '0.1.1'],
    ['1', '1.0.0'],
    ['1.2', '1.2.0'],
    ['1.2.3', '1.2.3'],
    ['1.2.3.4', '1.2.3'],
    ['13', '13.0.0'],
    ['35.12', '35.12.0'],
    ['35.12.18', '35.12.18'],
    ['35.12.18.24', '35.12.18'],
    ['v1', '1.0.0'],
    ['v1.2', '1.2.0'],
    ['v1.2.3', '1.2.3'],
    ['v1.2.3.4', '1.2.3'],
    [' 1', '1.0.0'],
    ['1 ', '1.0.0'],
    ['1 0', '1.0.0'],
    ['1 1', '1.0.0'],
    ['1.1 1', '1.1.0'],
    ['1.1-1', '1.1.0'],
    ['1.1-1', '1.1.0'],
    ['a1', '1.0.0'],
    ['a1a', '1.0.0'],
    ['1a', '1.0.0'],
    ['version 1', '1.0.0'],
    ['version1', '1.0.0'],
    ['version1.0', '1.0.0'],
    ['version1.1', '1.1.0'],
    ['42.6.7.9.3-alpha', '42.6.7'],
    ['v2', '2.0.0'],
    ['v3.4 replaces v3.3.1', '3.4.0'],
    ['4.6.3.9.2-alpha2', '4.6.3'],
    ['1'.r(17) + '.2', '2.0.0'],
    ['1'.r(17) + '.2.3', '2.3.0'],
    ['1.' + '2'.r(17) + '.3', '1.0.0'],
    ['1.2.' + '3'.r(17), '1.2.0'],
    ['1'.r(17) + '.2.3.4', '2.3.4'],
    ['1.' + '2'.r(17) + '.3.4', '1.0.0'],
    ['1.2.' + '3'.r(17) + '.4', '1.2.0'],
    [
      '1'.r(17) + '.' + '2'.r(16) + '.' + '3'.r(16),
      '2'.r(16) + '.' + '3'.r(16) + '.0'
    ],
    ['1'.r(16) + '.' + '2'.r(17) + '.' + '3'.r(16), '1'.r(16) + '.0.0'],
    [
      '1'.r(16) + '.' + '2'.r(16) + '.' + '3'.r(17),
      '1'.r(16) + '.' + '2'.r(16) + '.0'
    ],
    ['11' + '.1'.r(126), '11.1.1'],
    ['1'.r(16), '1'.r(16) + '.0.0'],
    ['a' + '1'.r(16), '1'.r(16) + '.0.0'],
    ['1'.r(16) + '.2.3.4', '1'.r(16) + '.2.3'],
    ['1.' + '2'.r(16) + '.3.4', '1.' + '2'.r(16) + '.3'],
    ['1.2.' + '3'.r(16) + '.4', '1.2.' + '3'.r(16)],
    [
      '1'.r(16) + '.' + '2'.r(16) + '.' + '3'.r(16),
      '1'.r(16) + '.' + '2'.r(16) + '.' + '3'.r(16)
    ],
    ['1.2.3.' + '4'.r(252) + '.5', '1.2.3'],
    ['1.2.3.' + '4'.r(1024), '1.2.3'],
    ['1'.r(17) + '.4.7.4', '4.7.4']
  ].forEach(function (tuple) {
    var input = tuple[0]
    var expected = tuple[1]
    var msg = `coerce(${input}) should become ${expected}`
    t.equal((coerce(input) || {}).version, expected, msg)
  })

  t.equal(valid(coerce('42.6.7.9.3-alpha')), '42.6.7')
  t.equal(valid(coerce('v2')), '2.0.0')

  t.end()
})
